/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

var moment = require('moment');

/**
 * @class
 * Initializes a new instance of the PoolAddParameter class.
 * @constructor
 * A pool in the Azure Batch service to add.
 * @member {string} id Gets or sets a string that uniquely identifies the pool
 * within the account. The id can contain any combination of alphanumeric
 * characters including hyphens and underscores, and cannot contain more than
 * 64 characters.
 * 
 * @member {string} [displayName] Gets or sets the display name for the pool.
 * 
 * @member {string} vmSize Gets or sets the size of virtual machines in the
 * pool.  All VMs in a pool are the same size.
 * 
 * @member {string} osFamily Gets or sets the Azure Guest OS family to be
 * installed on the virtual machines in the pool.
 * 
 * @member {string} [targetOSVersion] Gets or sets the Azure Guest OS version
 * to be installed on the virtual machines in the pool. The default value is
 * * which specifies the latest operating system version for the specified
 * family.
 * 
 * @member {moment.duration} [resizeTimeout] Gets or sets the timeout for
 * allocation of compute nodes to the pool. In a Get Pool operation, this is
 * the timeout for the most recent resize operation. The default value is 10
 * minutes.
 * 
 * @member {number} [targetDedicated] Gets or sets the desired number of
 * compute nodes in the pool. This property must have the default value if
 * EnableAutoScale is true. It is required if EnableAutoScale is false.
 * 
 * @member {boolean} [enableAutoScale] Gets or sets whether the pool size
 * should automatically adjust over time. If true, the AutoScaleFormula
 * property must be set. If false, the TargetDedicated property must be set.
 * 
 * @member {string} [autoScaleFormula] Gets or sets a formula for the desired
 * number of compute nodes in the pool.
 * 
 * @member {moment.duration} [autoScaleEvaluationInterval] Gets or sets a time
 * interval for the desired autoscale evaluation period in the pool.
 * 
 * @member {boolean} [enableInterNodeCommunication] Gets or sets whether the
 * pool permits direct communication between nodes.
 * 
 * @member {object} [startTask] Gets or sets a task specified to run on each
 * compute node as it joins the pool.
 * 
 * @member {string} [startTask.commandLine] Gets or sets the command line of
 * the start task.
 * 
 * @member {array} [startTask.resourceFiles] Gets or sets a list of files that
 * Batch will download to the compute node before running the command line.
 * 
 * @member {array} [startTask.environmentSettings] Gets or sets a list of
 * environment variable settings for the start task.
 * 
 * @member {boolean} [startTask.runElevated] Gets or sets whether to run the
 * start task in elevated mode. The default value is false.
 * 
 * @member {number} [startTask.maxTaskRetryCount] Gets or sets the maximum
 * number of times the task may be retried.
 * 
 * @member {boolean} [startTask.waitForSuccess] Gets or sets whether the Batch
 * Service should wait for the start task to complete successfully (that is,
 * to exit with exit code 0) before scheduling any tasks on the compute node.
 * 
 * @member {array} [certificateReferences] Gets or sets the list of
 * certificates to be installed on each compute node in the pool.
 * 
 * @member {array} [applicationPackageReferences] Gets or sets the list of
 * application packages to be installed on each compute node in the pool.
 * 
 * @member {number} [maxTasksPerNode] Gets or sets the maximum number of tasks
 * that can run concurrently on a single compute node in the pool.
 * 
 * @member {object} [taskSchedulingPolicy] Gets or sets how the Batch service
 * distributes tasks between compute nodes in the pool.
 * 
 * @member {string} [taskSchedulingPolicy.nodeFillType] Gets or sets how tasks
 * should be distributed across compute nodes. Possible values include:
 * 'spread', 'pack', 'unmapped'
 * 
 * @member {array} [metadata] Gets or sets a list of name-value pairs
 * associated with the pool as metadata.
 * 
 */
function PoolAddParameter() {
}

/**
 * Defines the metadata of PoolAddParameter
 *
 * @returns {object} metadata of PoolAddParameter
 *
 */
PoolAddParameter.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'PoolAddParameter',
    type: {
      name: 'Composite',
      className: 'PoolAddParameter',
      modelProperties: {
        id: {
          required: true,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        displayName: {
          required: false,
          serializedName: 'displayName',
          type: {
            name: 'String'
          }
        },
        vmSize: {
          required: true,
          serializedName: 'vmSize',
          type: {
            name: 'String'
          }
        },
        osFamily: {
          required: true,
          serializedName: 'osFamily',
          type: {
            name: 'String'
          }
        },
        targetOSVersion: {
          required: false,
          serializedName: 'targetOSVersion',
          type: {
            name: 'String'
          }
        },
        resizeTimeout: {
          required: false,
          serializedName: 'resizeTimeout',
          type: {
            name: 'TimeSpan'
          }
        },
        targetDedicated: {
          required: false,
          serializedName: 'targetDedicated',
          type: {
            name: 'Number'
          }
        },
        enableAutoScale: {
          required: false,
          serializedName: 'enableAutoScale',
          type: {
            name: 'Boolean'
          }
        },
        autoScaleFormula: {
          required: false,
          serializedName: 'autoScaleFormula',
          type: {
            name: 'String'
          }
        },
        autoScaleEvaluationInterval: {
          required: false,
          serializedName: 'autoScaleEvaluationInterval',
          type: {
            name: 'TimeSpan'
          }
        },
        enableInterNodeCommunication: {
          required: false,
          serializedName: 'enableInterNodeCommunication',
          type: {
            name: 'Boolean'
          }
        },
        startTask: {
          required: false,
          serializedName: 'startTask',
          type: {
            name: 'Composite',
            className: 'StartTask'
          }
        },
        certificateReferences: {
          required: false,
          serializedName: 'certificateReferences',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'CertificateReferenceElementType',
                type: {
                  name: 'Composite',
                  className: 'CertificateReference'
                }
            }
          }
        },
        applicationPackageReferences: {
          required: false,
          serializedName: 'applicationPackageReferences',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationPackageReferenceElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationPackageReference'
                }
            }
          }
        },
        maxTasksPerNode: {
          required: false,
          serializedName: 'maxTasksPerNode',
          type: {
            name: 'Number'
          }
        },
        taskSchedulingPolicy: {
          required: false,
          serializedName: 'taskSchedulingPolicy',
          type: {
            name: 'Composite',
            className: 'TaskSchedulingPolicy'
          }
        },
        metadata: {
          required: false,
          serializedName: 'metadata',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'MetadataItemElementType',
                type: {
                  name: 'Composite',
                  className: 'MetadataItem'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = PoolAddParameter;
